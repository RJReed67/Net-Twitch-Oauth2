.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "README 3"
.TH README 3 "2014-12-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Twitch::Oauth2 \- a simple Perl wrapper around Twitch OAuth v2.0 protocol
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use CGI;
\&    my $cgi = CGI\->new;
\&     
\&    use Net::Twitch::Oauth2;
\&     
\&    my $twitch = Net::Twitch::Oauth2\->new(
\&        application_id => \*(Aqyour_application_id\*(Aq, 
\&        application_secret => \*(Aqyour_application_secret\*(Aq,
\&        callback => \*(Aqhttp://yourdomain.com/twitch/callback\*(Aq
\&    );
\&     
\&    ###get authorization URL for your application
\&    my $url = $twitch\->get_authorization_url(
\&        scope => [\*(Aquser_read\*(Aq],
\&    );
\&     
\&    ####now redirect to this url
\&    print $cgi\->redirect($url);
\&     
\&    ##once user authorizes your application twitch will send him/her back to your application
\&    ##to the callback link provided above
\&     
\&    ###in your callback block capture verifier code and get access_token
\&     
\&    my $twitch = Net::Twitch::Oauth2\->new(
\&        application_id => \*(Aqyour_application_id\*(Aq,
\&        application_secret => \*(Aqyour_application_secret\*(Aq,
\&        callback => \*(Aqhttp://yourdomain.com/twitch/callback\*(Aq
\&    );
\&     
\&    my $access_token = $twitch\->post_access_token(code => $cgi\->param(\*(Aqcode\*(Aq));
\&    ###save this token in database or session
\&     
\&    ##later on your application you can use this verifier code to comunicate
\&    ##with twitch on behalf of this user
\&     
\&    my $twitch = Net::Twitch::Oauth2\->new(
\&        access_token => $access_token
\&    );
\&     
\&    my $info = $twitch\->get(
\&        \*(Aqhttps://api.twitch.tv/kraken/user\*(Aq ##Twitch API URL
\&    );
\&     
\&    print $info\->as_json;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Twitch::Oauth2 gives you a way to simply access Twitch.tv Oauth 2.0 protocol
.PP
For more information please see example folder shipped with this Module
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For more information about Twitch Oauth 2.0 \s-1API\s0
.PP
Please Check
<http://dev.twitch.tv>
.SH "USAGE"
.IX Header "USAGE"
.ie n .SS """Net::Twitch::Oauth2\->new( %args )"""
.el .SS "\f(CWNet::Twitch::Oauth2\->new( %args )\fP"
.IX Subsection "Net::Twitch::Oauth2->new( %args )"
Pass args as hash. \f(CW%args\fR are:
.IP "\(bu" 4
\&\f(CW\*(C`application_id \*(C'\fR
.Sp
Your application id as you get from twitch developers platform
when you register your application
.IP "\(bu" 4
\&\f(CW\*(C`application_secret\*(C'\fR
.Sp
Your application secret id as you get from twitch developers platform
when you register your application
.ie n .SS """$twitch\->get_authorization_url( %args )"""
.el .SS "\f(CW$twitch\->get_authorization_url( %args )\fP"
.IX Subsection "$twitch->get_authorization_url( %args )"
Return an Authorization \s-1URL\s0 for your application, once you receive this
\&\s-1URL\s0 redirect user there in order to authorize your application
.IP "\(bu" 4
\&\f(CW\*(C`scope\*(C'\fR
.Sp
['user_read',...]
.Sp
Array of Extended permissions as described by twitch Oauth2.0 \s-1API\s0
you can get more information about scope/Extended Permission from
http://dev.twitch.tv
.IP "\(bu" 4
\&\f(CW\*(C`callback\*(C'\fR
.Sp
callback \s-1URL,\s0 where twitch will send users after they authorize
your application
.ie n .SS """$twitch\->post_access_token( %args )"""
.el .SS "\f(CW$twitch\->post_access_token( %args )\fP"
.IX Subsection "$twitch->post_access_token( %args )"
Returns access_token string
One arg to pass
.IP "\(bu" 4
\&\f(CW\*(C`code\*(C'\fR
.Sp
This is the verifier code that twitch sends back to your
callback \s-1URL\s0 once user authorize your app, you need to capture
this code and pass to this method in order to get access_token
.Sp
Verifier code will be presented with your callback \s-1URL\s0 as code
parameter as the following
.Sp
http://your\-call\-back\-url.com?code=234er7y6fdgjdssgfsd...
.Sp
When access token is returned you need to save it in a secure
place in order to use it later in your application
.ie n .SS """$twitch\->get( $url,$args )"""
.el .SS "\f(CW$twitch\->get( $url,$args )\fP"
.IX Subsection "$twitch->get( $url,$args )"
Send get request to twitch and returns response back from twitch
.IP "\(bu" 4
\&\f(CW\*(C`url\*(C'\fR
.Sp
Twitch \s-1API URL\s0 as string
.IP "\(bu" 4
\&\f(CW$args\fR
.Sp
hashref of parameters to be sent with graph \s-1API URL\s0 if required
.PP
The response returned can be formatted as the following
.IP "\(bu" 4
\&\f(CW\*(C`$response>as_json\*(C'\fR
.Sp
Returns response as json object
.IP "\(bu" 4
\&\f(CW\*(C`$response>as_hash\*(C'\fR
.Sp
Returns response as perl hashref
.PP
For more information about twitch \s-1API,\s0 please check
http://dev.twitch.tv
.ie n .SS """$twitch\->post( $url,$args )"""
.el .SS "\f(CW$twitch\->post( $url,$args )\fP"
.IX Subsection "$twitch->post( $url,$args )"
Send post request to twitch \s-1API,\s0 usually to post something
.IP "\(bu" 4
\&\f(CW\*(C`url\*(C'\fR
.Sp
Twitch \s-1API URL\s0 as string
.IP "\(bu" 4
\&\f(CW$args\fR
.Sp
hashref of parameters to be sent with twitch \s-1API URL\s0
.PP
For more information about twitch \s-1API,\s0 please check
http://dev.twitch.tv
.SH "INSTALLATION"
.IX Header "INSTALLATION"
To install this module type the following:
.PP
.Vb 4
\&   perl Makefile.PL
\&   make
\&   make test
\&   make install
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This module requires these other modules and libraries:
.PP
.Vb 3
\&  Jason::Any
\&  LWP::UserAgent
\&  URI::Escape
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ronald J. Reed, <rjreed67@gmail.com>
Based on Net::Facebook::Oauth2 module by Mahmoud A. Mehyar, <mamod.mehyar@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2014 by Ronald J. Reed
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 108:" 4
.IX Item "Around line 108:"
=back without =over
